==================
Lambda expressions
==================

let add_one = x => x + 1
let process = x => do
    let result = transform(x)
    result
end

---

(source_file
  (variable_declaration
    name: (identifier)
    value: (lambda
      params: (identifier)
      body: (binary_expression
        left: (identifier)
        right: (number_literal))))
  (variable_declaration
    name: (identifier)
    value: (lambda
      params: (identifier)
      body: (block_expression
        (variable_declaration
          name: (identifier)
          value: (function_call
            function: (identifier)
            arguments: (arguments
              (identifier))))
        (identifier)))))

==================
If expressions
==================

let max = if a > b then a else b end

---

(source_file
  (variable_declaration
    name: (identifier)
    value: (if_expression
      condition: (binary_expression
        left: (identifier)
        right: (identifier))
      consequence: (identifier)
      alternative: (identifier))))

==================
Match expressions
==================

match value
    Option.Some(x) => process(x),
    Option.None => default_value,
    _ => fallback(),
end

---

(source_file
  (match_statement
    value: (identifier)
    (match_arm
      pattern: (match_pattern
        enum_name: (identifier)
        variant: (identifier)
        (match_pattern
          (identifier)))
      body: (function_call
        function: (identifier)
        arguments: (arguments
          (identifier))))
    (match_arm
      pattern: (match_pattern
        enum_name: (identifier)
        variant: (identifier))
      body: (identifier))
    (match_arm
      pattern: (match_pattern)
      body: (function_call
        function: (identifier)
        arguments: (arguments)))))

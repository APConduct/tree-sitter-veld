==================
Function declaration
==================

fn add(a: i32, b: i32) -> i32
    a + b
end

proc greet(name: str)
    println~("Hello, {}!", name)
end

---

(source_file
  (function_declaration
    name: (identifier)
    parameters: (parameters
      (parameter
        name: (identifier)
        type: (basic_type (identifier)))
      (parameter
        name: (identifier)
        type: (basic_type (identifier))))
    return_type: (basic_type (identifier))
    body: (block
      (expression_statement
        expression: (binary_expression
          left: (identifier)
          right: (identifier)))))
  (proc_declaration
    name: (identifier)
    parameters: (parameters
      (parameter
        name: (identifier)
        type: (basic_type (identifier))))
    body: (block
      (expression_statement
        expression: (macro_expression
          name: (identifier)
          arguments: (macro_arguments
            (string_literal)
            (identifier)))))))

==================
Struct and kind declarations
==================

struct Point
    x: f64,
    y: f64,

    fn distance(self) -> f64 => (self.x * self.x + self.y * self.y).sqrt()
end

kind Shape
    fn area(self) -> f64
    fn perimeter(self) -> f64
end

---

(source_file
  (struct_declaration
    name: (identifier)
    fields: (struct_fields
      (struct_field
        name: (identifier)
        type: (basic_type (identifier)))
      (struct_field
        name: (identifier)
        type: (basic_type (identifier))))
    methods: (struct_method
      name: (identifier)
      parameters: (method_parameters
        (identifier))
      return_type: (basic_type (identifier))
      expression: (method_call
        object: (binary_expression
          left: (binary_expression
            left: (member_expression
              object: (identifier)
              property: (identifier))
            right: (member_expression
              object: (identifier)
              property: (identifier)))
          right: (binary_expression
            left: (member_expression
              object: (identifier)
              property: (identifier))
            right: (member_expression
              object: (identifier)
              property: (identifier))))
        method: (identifier)
        arguments: (arguments)))))
  (kind_declaration
    name: (identifier)
    (kind_method
      name: (identifier)
      parameters: (method_parameters
        (identifier))
      return_type: (basic_type (identifier)))
    (kind_method
      name: (identifier)
      parameters: (method_parameters
        (identifier))
      return_type: (basic_type (identifier)))))

==================
Attributes
==================

@derive(Debug, Clone)
struct Point
    x: f64,
    y: f64,
end

@when(target = "web")
pub fn get_platform() -> str "web" end

@no_conform
struct SpecialPoint
    x: f64,
    y: f64,
end

---

(source_file
  (attribute
    name: (identifier)
    (attribute_argument
      (identifier))
    (attribute_argument
      (identifier)))
  (struct_declaration
    name: (identifier)
    fields: (struct_fields
      (struct_field
        name: (identifier)
        type: (basic_type (identifier)))
      (struct_field
        name: (identifier)
        type: (basic_type (identifier)))))
  (attribute
    name: (identifier)
    (attribute_argument
      name: (identifier)
      value: (string_literal)))
  (function_declaration
    (identifier)
    name: (identifier)
    parameters: (parameters)
    return_type: (basic_type (identifier))
    body: (block
      (expression_statement
        expression: (string_literal))))
  (attribute
    name: (identifier))
  (struct_declaration
    name: (identifier)
    fields: (struct_fields
      (struct_field
        name: (identifier)
        type: (basic_type (identifier)))
      (struct_field
        name: (identifier)
        type: (basic_type (identifier))))))
